name: "VProfile IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
      - stage
    paths:
      - terraform/**

# Environmental variables
env:
  # AWS access key and secret key
  ACCESS_KEY_ID: ${{secrets.ACCESS_KEY_ID}}
  SECRET_ACCESS_KEY: ${{secrets.SECRET_ACCESS_KEY}}
  # S3 for the terraform state
  BUCKET_TF_STATE: ${{secrets.BUCKET_TF_STATE}}
  # Cluster name and region
  EKS_CLUSTER: vprofile-eks
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-colr -input=false -out planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply changes
        id: apply
        if: github.ref == 'refs/head/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      - name: Get Kube config file
        id: getConfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name

      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getConfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx
